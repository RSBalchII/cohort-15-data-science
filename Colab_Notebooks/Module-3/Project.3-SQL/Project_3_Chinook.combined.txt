# Querying the Chinook Database
## Imports and Setup
# Questions and Answers for my dataset

1. Details of the first 20 artists:

   The query returns the ArtistId and Name for the first 20 artists in the database. The output shows a variety of artists across different genres, including AC/DC, Accept, Aerosmith, Alanis Morissette, and many others.



2. Available music genres:

   The query returns 25 different genres, including Rock, Jazz, Metal, Alternative & Punk, Rock And Roll, Blues, Latin, Reggae, Pop, Soundtrack, and others.



3. Tracks composed by Wolfgang Amadeus Mozart:

   The query returns 5 tracks composed by Mozart, including "Eine Kleine Nachtmusik" Serenade In G, K. 525: I. Allegro, Concerto for Clarinet in A Major, K. 622: II. Adagio, and others.



4. Mozart tracks in the Classical genre:

   The query returns one track: "Die Zauberflöte, K.620: "Der Hölle Rache Kocht in Meinem Herze"".



5. Details of albums "Big Ones" and "Jagged Little Pill":

   The query returns the AlbumId, Title, and ArtistId for these two albums. "Big Ones" has AlbumId 5 and ArtistId 3, while "Jagged Little Pill" has AlbumId 6 and ArtistId 4.



6. Artists with names starting with "Bar":

   The query returns two artists: Barão Vermelho and Barry Wordsworth & BBC Concert Orchestra.



7. Tracks with durations between 100 and 200 seconds:

   The query returns 20 tracks that meet this criteria, including "C.O.D." by AC/DC, "Perfect" by Alanis Morissette, and others.



8. Tracks whose names start with "To":

   The query returns 5 tracks, including "Tomorrow's Dream", "Too Many Ways (Alternate)", and others.



9. Artists starting with "R", sorted alphabetically:

   The query returns 9 artists, including R.E.M., Raimundos, Raul Seixas, Red Hot Chili Peppers, and others.



10. Unique names of all playlists:

    The query returns 18 unique playlist names, including Music, Movies, TV Shows, 90's Music, and others.



11. Customers associated with each invoice:

    The query returns the InvoiceId and CustomerNames for each invoice, showing which customers are associated with each invoice.



12. Longest track in the database:

    The longest track is "Occupation / Precipice" with a duration of 5286953 milliseconds (about 88.11 minutes).



13. Shortest track in the database:

    The shortest track is "É Uma Partida De Futebol" with a duration of 1071 milliseconds (about 1.07 seconds).



14. Total length of all tracks combined:

    The total length of all tracks is 1378778040 milliseconds, which is equivalent to about 383 hours of playtime.



15. Average length of a track:

    The average length of a track is 393599.212103911 milliseconds, which is about 6.56 minutes.



16. Job titles of employees:

    The query returns 7 unique job titles: General Manager, Sales Manager, Sales Support Agent, IT Manager, and IT Staff.



17. Number of employees working as Sales Support Agents:

    There are 3 employees working as Sales Support Agents.



18. Number of tracks in each playlist:

    The query returns the number of tracks for each playlist, ranging from 1 to 3290 tracks per playlist.



19. Top 10 albums with titles, total lengths, and number of tracks:

    The query returns details for the top 10 albums, including "For Those About To Rock We Salute You", "Balls to the Wall", "Restless and Wild", and others.



20. Relationship between album length and number of tracks:

    The query provides data for plotting the relationship between album length and number of tracks, which can be visualized in a scatter plot.
## Basic Queries

### SELECT (with * and with column names)

What are the details of the first 20 artists in the database
### 1. WHERE
### 2. AND
### 3. OR

### 4. LIKE (with % or _ wildcard)

### 5. BETWEEN

### LIMIT



## Sorting and Grouping

### ORDER BY

### DISTINCT

### GROUP BY



## Aggregates

### MAX

### MIN

### SUM

### AVG

### COUNT



## Plotting Number of Tracks per Playlist
## Plotting Album Length and Number of Tracks per Album
%%capture

# pandas module

import pandas as pd

import pandas_gbq

import matplotlib.pyplot as plt



# import sqlite3

import sqlite3



# colab modules

from google.colab import auth

from google.colab import syntax

from google.colab import userdata
# Install the sqlite package for Ubuntu

# Download the Chinook sqlite database

%%capture

%%bash

apt-get update

apt-get install -y sqlite3

%%bash

[ -f chinook.zip ] ||

  curl -s -O https://www.sqlitetutorial.net/wp-content/uploads/2018/03/chinook.zip

unzip -l chinook.zip

!unzip -u chinook.zip
!ls -la
# Get a list of the tables in the database

%%script sqlite3 --column --header chinook.db

.tables

%%script sqlite3 --column --header chinook.db

.schema albums
%%script sqlite3 --column --header chinook.db

.schema artists
%%script sqlite3 --column --header chinook.db

SELECT *

FROM artists

 LIMIT 20
%%script sqlite3 --column --header chinook.db

SELECT *

FROM genres



%%script sqlite3 --column --header chinook.db

SELECT *

FROM tracks

WHERE composer = 'Wolfgang Amadeus Mozart'
%%script sqlite3 --column --header chinook.db

SELECT *

FROM tracks

WHERE composer = 'Wolfgang Amadeus Mozart'

AND

GenreId = 25

%%script sqlite3 --column --header chinook.db

SELECT *

FROM albums

WHERE Title = 'Big Ones'

OR

Title = 'Jagged Little Pill'
%%script sqlite3 --column --header chinook.db

SELECT *

FROM artists

WHERE Name LIKE 'Bar%';
%%script sqlite3 --column --header chinook.db

SELECT *

FROM tracks

WHERE Milliseconds BETWEEN 100000 AND 200000

LIMIT 20
%%script sqlite3 --column --header chinook.db

SELECT *

FROM tracks

WHERE Name LIKE 'To%'

LIMIT 5
%%script sqlite3 --column --header chinook.db

SELECT *

FROM artists

WHERE Name LIKE 'R%'

ORDER BY Name
%%script sqlite3 --column --header chinook.db

SELECT DISTINCT Name

FROM playlists;
# What is the Customers full name for each invoice?

%%script sqlite3 --column --header chinook.db

SELECT

    InvoiceId,

    GROUP_CONCAT(FirstName || ' ' || LastName) AS CustomerNames

FROM

    Customers

JOIN

    Invoices ON Customers.CustomerId = Invoices.CustomerId

GROUP BY

    InvoiceId

ORDER BY CustomerNames

LIMIT 50
# What is the longest track?

%%script sqlite3 --column --header chinook.db

SELECT name, MAX(Milliseconds) FROM tracks;
# What is the shortest track?

%%script sqlite3 --column --header chinook.db

SELECT name, MIN(Milliseconds) FROM tracks;
# What is the length of all tracks together ?

%%script sqlite3 --column --header chinook.db

SELECT SUM(Milliseconds) FROM tracks;
milliseconds = 1378778040

seconds = milliseconds / 1000

minutes = seconds / 60

hours = minutes / 60

print(f'{seconds:.0f} seconds')

print(f'{minutes:.0f} minutes')

print(f'{hours:.0f} hours of playtime')
# What is the average length of a track?

%%script sqlite3 --column --header chinook.db

SELECT AVG(Milliseconds) FROM tracks;
milliseconds = 393599.212103911

seconds = milliseconds / 1000

minutes = seconds / 60

hours = minutes / 60

print(f'{seconds:.0f} seconds')

print(f'{minutes:.2f} minutes')
%%script sqlite3 --column --header chinook.db

SELECT title FROM employees;
# How many employees are sales agents?

%%script sqlite3 --column --header chinook.db

SELECT COUNT(*)

FROM employees

WHERE Title = 'Sales Support Agent';
%%script sqlite3 --column --header chinook.db

SELECT

    p.Name AS PlaylistName,

    COUNT(pt.TrackId) AS NumberOfTracks

FROM

    playlists AS p

JOIN

    playlist_track AS pt ON p.PlaylistId = pt.PlaylistId

GROUP BY

    p.PlaylistId;
# Connect to the database

conn = sqlite3.connect('chinook.db')



# SQL query to get data for the plot

sql = """

SELECT

    p.Name AS PlaylistName,

    COUNT(pt.TrackId) AS NumberOfTracks

FROM

    playlists AS p

JOIN

    playlist_track AS pt ON p.PlaylistId = pt.PlaylistId

GROUP BY

    p.PlaylistId;

"""



# Read the data directly into a pandas DataFrame

df = pd.read_sql_query(sql, conn)



# Close the connection

conn.close()



# Create the plot

plt.figure(figsize=(10, 6))

plt.bar(df['PlaylistName'], df['NumberOfTracks'])

plt.xlabel("Playlist Name")

plt.ylabel("Number of Tracks")

plt.title("Number of Tracks per Playlist")

plt.xticks(rotation=45, ha="right")

plt.tight_layout()

plt.show()

%%script sqlite3 --column --header chinook.db

SELECT

    al.Title AS AlbumTitle,  -- Select the album title

    SUM(t.Milliseconds) AS AlbumLength,  -- Calculate total album length in milliseconds

    COUNT(t.TrackId) AS NumberOfTracks

FROM

    tracks AS t

JOIN

    albums AS al ON t.AlbumId = al.AlbumId

GROUP BY

    al.AlbumId, al.Title

LIMIT 10;
# Connect to the database

conn = sqlite3.connect('chinook.db')



# SQL query to get the length of tracks in milliseconds and the number of tracks in each album

sql = """

SELECT

    al.Title AS AlbumTitle,

    SUM(t.Milliseconds) AS AlbumLength,

    COUNT(t.TrackId) AS NumberOfTracks

FROM

    tracks AS t

JOIN

    albums AS al ON t.AlbumId = al.AlbumId

GROUP BY

    al.AlbumId, al.Title

"""



# Read the data directly into a pandas DataFrame

df = pd.read_sql_query(sql, conn)



# Close the connection

conn.close()



# Convert milliseconds to minutes

df['AlbumLengthMinutes'] = df['AlbumLength'] / 60000



# Create the plot

plt.figure(figsize=(10, 6))

plt.scatter(df['AlbumLengthMinutes'], df['NumberOfTracks'])

plt.xlabel("Album Length (minutes)")

plt.ylabel("Number of Tracks in Album")

plt.title("Album Length vs. Number of Tracks per Album")

plt.tight_layout()

plt.show()
