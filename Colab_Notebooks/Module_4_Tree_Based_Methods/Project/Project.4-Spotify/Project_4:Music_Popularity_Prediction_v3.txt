Project_4:Music_Popularity_Prediction_v3
November 7, 2024

1

Project 4: Music Popularity Prediction V3

By: Robert S Balch

2

Introduction

Welcome to my project on Music Popularity Prediction. In this analysis, I’ve developed predictive
models to forecast song popularity on Spotify’s Top 200 Weekly (Global) charts for 2020 & 2021.
This project aims to provide insights into the factors that contribute to a song’s success on these
charts.

3

Project Overview

My goal was to create supervised regression models that could predict a song’s popularity score
based on various features. I’ve used a dataset provided by DDC Data Science, which includes
information about songs, their audio features, artist popularity, and other relevant characteristics.
The data. A chosen data set is provided by DDC Data Science

4

Imports

[2]: import sys
print(sys.executable)
/usr/local/bin/python
[3]: import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

1

from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
import xgboost as xgb
from sklearn.metrics import mean_squared_error, root_mean_squared_error,r2_score
[4]: import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
#n_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
import xgboost as xgb
from sklearn.metrics import mean_squared_error, root_mean_squared_error,r2_score
[5]: %%capture
url = "https://ddc-datascience.s3.amazonaws.com/Projects/Project.4-Spotify/Data/
↪Spotify.csv"
!curl -s -I {url}

5

Data Exploration

[6]: df_1 = pd.read_csv(url).copy()

5.1

Head

[7]: df_1.head()
[7]:
0
1
2
3
4

Index
1
2
3
4
5

Highest Charting Position
1
2
1
3
5

0
1
2
3
4

Week of Highest Charting
2021-07-23--2021-07-30
2021-07-23--2021-07-30
2021-06-25--2021-07-02
2021-07-02--2021-07-09
2021-07-23--2021-07-30

Number of Times Charted
8
3
11
5
1

Song Name
Beggin'
STAY (with Justin Bieber)
good 4 u
Bad Habits
INDUSTRY BABY (feat. Jack Harlow)

Artist Artist Followers

Song ID

2

\

\

Streams
48,633,449
47,248,719
40,162,559
37,799,456
33,948,454

\

0
1
2
3
4

Måneskin
The Kid LAROI
Olivia Rodrigo
Ed Sheeran
Lil Nas X

3377762
2230022
6266514
83293380
5473565

3Wrjm47oTz2sjIgck11l5e
5HCyWlXZPP0y6Gqq8TgA20
4ZtFanR9U6ndgddUvNcjcG
6PQ88X9TkUIAUIZJHW2upE
27NovPIUIRrOZoCHxABJwK

0
1
2
3
4

Genre
['indie rock italiano', 'italian pop']
['australian hip hop']
['pop']
['pop', 'uk pop']
['lgbtq+ hip hop', 'pop rap']

0
1
2
3
4

Speechiness Acousticness Liveness
0.0504
0.127
0.359
0.0483
0.0383
0.103
0.154
0.335
0.0849
0.0348
0.0469
0.364
0.0615
0.0203
0.0501

… Danceability Energy Loudness
…
0.714
0.8
-4.808
…
0.591 0.764
-5.484
…
0.563 0.664
-5.044
…
0.808 0.897
-3.712
…
0.736 0.704
-7.409

Tempo Duration (ms) Valence
211560
0.589
134.002
169.928
141806
0.478
166.928
178147
0.688
126.026
231041
0.591
149.995
212000
0.894

\

Chord
B
C#/Db
A
B
D#/Eb

[5 rows x 23 columns]

5.2

Tail

5.3

Shape

[8]: df_1.shape
[8]: (1556, 23)

5.4

columns

[ ]: df_1.columnsColab_Notebooks/Module-4/Project/Project.4-Spotify/Project_4:
↪Music_Popularity_Prediction.ipynb
[ ]: Index(['Index', 'Highest Charting Position', 'Number of Times Charted',
'Week of Highest Charting', 'Song Name', 'Streams', 'Artist',
'Artist Followers', 'Song ID', 'Genre', 'Release Date', 'Weeks Charted',
'Popularity', 'Danceability', 'Energy', 'Loudness', 'Speechiness',
'Acousticness', 'Liveness', 'Tempo', 'Duration (ms)', 'Valence',
'Chord'],
dtype='object')

5.5

Dtypes

[10]: df_1.dtypes

3

[10]: Index
Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord
dtype: object

5.6

int64
int64
int64
object
object
object
object
object
object
object
object
object
object
object
object
object
object
object
object
object
object
object
object

Describe

[11]: df_1.describe()
[11]:
count
mean
std
min
25%
50%
75%
max

5.7

Index
1556.000000
778.500000
449.322824
1.000000
389.750000
778.500000
1167.250000
1556.000000

Highest Charting Position
1556.000000
87.744216
58.147225
1.000000
37.000000
80.000000
137.000000
200.000000

Isnull Sum

[12]: df_1.isnull().sum()
[12]: Index
Highest Charting Position
Number of Times Charted
Week of Highest Charting

0
0
0
0

4

Number of Times Charted
1556.000000
10.668380
16.360546
1.000000
1.000000
4.000000
12.000000
142.000000

Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord
dtype: int64

5.8

0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0

Isna Sum

[13]: df_1.isna().sum()
[13]: Index
Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence

0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0

5

Chord
dtype: int64

5.9

0

unique values

[14]: df_1.count('rows').unique().sum()
[14]: np.int64(1556)
[15]: df_1.count('columns')
[15]: 0
1
2
3
4

23
23
23
23
23
..
1551
23
1552
23
1553
23
1554
23
1555
23
Length: 1556, dtype: int64

5.10

Sort_values

[16]: df_1.sort_values(by = ['Popularity'], ascending = False).head(10)
[16]:
1
2
3
5
4
8
14
7
9
11

Index
2
3
4
6
5
9
15
8
10
12

Highest Charting Position
2
1
3
1
5
3
2
2
8
9

1
2
3
5
4
8

Week of Highest Charting
2021-07-23--2021-07-30
2021-06-25--2021-07-02
2021-07-02--2021-07-09
2021-05-07--2021-05-14
2021-07-23--2021-07-30
2021-06-18--2021-06-25

Number of Times Charted
3
11
5
18
1
8
10
10
10
9

Song Name
STAY (with Justin Bieber)
good 4 u
Bad Habits
MONTERO (Call Me By Your Name)
INDUSTRY BABY (feat. Jack Harlow)
Yonaguni

6

\

Streams
47,248,719
40,162,559
37,799,456
30,071,134
33,948,454
25,030,128

\

14
7
9
11

2021-05-21--2021-05-28
2021-06-18--2021-06-25
2021-07-02--2021-07-09
2021-07-02--2021-07-09

Butter
Todo De Ti
I WANNA BE YOUR SLAVE
Qué Más Pues?

1
2
3
5
4
8
14
7
9
11

Artist Artist Followers
The Kid LAROI
2230022
Olivia Rodrigo
6266514
Ed Sheeran
83293380
Lil Nas X
5473565
Lil Nas X
5473565
Bad Bunny
36142273
BTS
37106176
Rauw Alejandro
6080597
Måneskin
3377762
J Balvin, Maria Becerra
29051363

1
2
3
5
4
8
14
7
9
11

Genre
['australian hip hop']
['pop']
['pop', 'uk pop']
['lgbtq+ hip hop', 'pop rap']
['lgbtq+ hip hop', 'pop rap']
['latin', 'reggaeton', 'trap latino']
['k-pop', 'k-pop boy group']
['puerto rican pop', 'trap latino']
['indie rock italiano', 'italian pop']
['latin', 'reggaeton', 'reggaeton colombiano']

1
2
3
5
4
8
14
7
9
11

Loudness Speechiness Acousticness Liveness
-5.484
0.0483
0.0383
0.103
-5.044
0.154
0.335
0.0849
-3.712
0.0348
0.0469
0.364
-6.682
0.152
0.297
0.384
-7.409
0.0615
0.0203
0.0501
-4.601
0.118
0.276
0.135
-5.187
0.0948
0.00323
0.0906
-3.605
0.0506
0.31
0.0932
-4.008
0.0387
0.00165
0.178
-3.964
0.106
0.0261
0.173

1
2
3
5
4

Chord
C#/Db
A
B
G#/Ab
D#/Eb

7

19,985,713
26,951,613
24,551,591
22,405,111

Song ID
5HCyWlXZPP0y6Gqq8TgA20
4ZtFanR9U6ndgddUvNcjcG
6PQ88X9TkUIAUIZJHW2upE
67BtfxlNbhBmCDR2L2l8qd
27NovPIUIRrOZoCHxABJwK
2JPLbjOn0wPCngEot2STUS
2bgTY4UwhfBYhGT4HUYStN
4fSIb4hdOQ151TILNsSEaF
4pt5fDVTg5GhEvEtlz9dKk
6hf0RpxTbOprT5nnwzkk8e

\

… Danceability Energy
…
0.591 0.764
…
0.563 0.664
…
0.808 0.897
…
0.61 0.508
…
0.736 0.704
…
0.644 0.648
…
0.759 0.459
…
0.78 0.718
…
0.75 0.608
…
0.891 0.819

\

Tempo Duration (ms) Valence
169.928
141806
0.478
166.928
178147
0.688
126.026
231041
0.591
178.818
137876
0.758
149.995
212000
0.894
179.951
206710
0.44
109.997
164442
0.695
127.949
199604
0.342
132.507
173347
0.958
101.968
217773
0.768

\

8
14
7
9
11

C#/Db
G#/Ab
D#/Eb
C#/Db
G#/Ab

[10 rows x 23 columns]

6

Data Cleaning and Feature Engineering

6.1

New copy of dataframe

[17]: df_cleaning = df_1.copy()
df_cleaning
[17]:
0
1
2
3
4
…
1551
1552
1553
1554
1555

Index
1
2
3
4
5
…
1552
1553
1554
1555
1556

Highest Charting Position
1
2
1
3
5
…
195
196
197
198
199

Week of Highest Charting
0
2021-07-23--2021-07-30
1
2021-07-23--2021-07-30
2
2021-06-25--2021-07-02
3
2021-07-02--2021-07-09
4
2021-07-23--2021-07-30
…
…
1551
2019-12-27--2020-01-03
1552
2019-12-27--2020-01-03
1553
2019-12-27--2020-01-03
1554
2019-12-27--2020-01-03
1555
2019-12-27--2020-01-03

0
1
2
3
4

Number of Times Charted
8
3
11
5
1
…
1
1
1
1
1

Song Name
Beggin'
STAY (with Justin Bieber)
good 4 u
Bad Habits
INDUSTRY BABY (feat. Jack Harlow)
…
New Rules
Cheirosa - Ao Vivo
Havana (feat. Young Thug)
Surtada - Remix Brega Funk
Lover (Remix) [feat. Shawn Mendes]

Artist Artist Followers
Måneskin
3377762
The Kid LAROI
2230022
Olivia Rodrigo
6266514
Ed Sheeran
83293380
Lil Nas X
5473565

8

\

Streams
48,633,449
47,248,719
40,162,559
37,799,456
33,948,454
…
4,630,675
4,623,030
4,620,876
4,607,385
4,595,450

Song ID
3Wrjm47oTz2sjIgck11l5e
5HCyWlXZPP0y6Gqq8TgA20
4ZtFanR9U6ndgddUvNcjcG
6PQ88X9TkUIAUIZJHW2upE
27NovPIUIRrOZoCHxABJwK

\

\

…
1551
1552
1553
1554
1555

…
Dua Lipa
Jorge & Mateus
Camila Cabello
Dadá Boladão, Tati Zaqui, OIK
Taylor Swift

…
27167675
15019109
22698747
208630
42227614

…
2ekn2ttSfGqwhhate0LSR0
2PWjKmjyTZeDpmOUa3a5da
1rfofaqEpACxVEHIZBJe6W
5F8ffc8KWKNawllr5WsW0r
3i9UVldZOE0aD0JnyfAZZ0

0
1
2
3
4
…
1551
1552
1553
1554
1555

Genre … Danceability
['indie rock italiano', 'italian pop'] …
0.714
['australian hip hop'] …
0.591
['pop'] …
0.563
['pop', 'uk pop'] …
0.808
['lgbtq+ hip hop', 'pop rap'] …
0.736
… …
…
['dance pop', 'pop', 'uk pop'] …
0.762
['sertanejo', 'sertanejo universitario'] …
0.528
['dance pop', 'electropop', 'pop', 'post-teen … …
0.765
['brega funk', 'funk carioca'] …
0.832
['pop', 'post-teen pop'] …
0.448

Energy Loudness Speechiness Acousticness Liveness
0
0.8
-4.808
0.0504
0.127
0.359
1
0.764
-5.484
0.0483
0.0383
0.103
2
0.664
-5.044
0.154
0.335
0.0849
3
0.897
-3.712
0.0348
0.0469
0.364
4
0.704
-7.409
0.0615
0.0203
0.0501
…
…
…
…
…
…
…
1551
0.7
-6.021
0.0694
0.00261
0.153
1552
0.87
-3.123
0.0851
0.24
0.333
1553 0.523
-4.333
0.03
0.184
0.132
1554
0.55
-7.026
0.0587
0.249
0.182
1555 0.603
-7.176
0.064
0.433
0.0862
Valence Chord
0
0.589
B
1
0.478 C#/Db
2
0.688
A
3
0.591
B
4
0.894 D#/Eb
…
…
…
1551
0.608
A
1552
0.714
B
1553
0.394
D
1554
0.881
F
1555
0.422
G
[1556 rows x 23 columns]

9

\

Tempo Duration (ms)
134.002
211560
169.928
141806
166.928
178147
126.026
231041
149.995
212000
…
116.073
209320
152.37
181930
104.988
217307
154.064
152784
205.272
221307

\

6.2

drop Index

[18]: df_cleaning.drop('Index', axis = 1, inplace = True)
#i
[19]: df_cleaning.transpose()
[19]:

0
Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

1
8
2021-07-23--2021-07-30
Beggin'
48,633,449
Måneskin
3377762
3Wrjm47oTz2sjIgck11l5e
['indie rock italiano', 'italian pop']
2017-12-08
2021-07-23--2021-07-30\n2021-07-16--2021-07-23…
100
0.714
0.8
-4.808
0.0504
0.127
0.359
134.002
211560
0.589
B
1

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness

\

2
3
2021-07-23--2021-07-30
STAY (with Justin Bieber)
47,248,719
The Kid LAROI
2230022
5HCyWlXZPP0y6Gqq8TgA20
['australian hip hop']
2021-07-09
2021-07-23--2021-07-30\n2021-07-16--2021-07-23…
99
0.591
0.764
-5.484

10

\

Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

0.0483
0.0383
0.103
169.928
141806
0.478
C#/Db
2

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

3
Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy

\

1
11
2021-06-25--2021-07-02
good 4 u
40,162,559
Olivia Rodrigo
6266514
4ZtFanR9U6ndgddUvNcjcG
['pop']
2021-05-21
2021-07-23--2021-07-30\n2021-07-16--2021-07-23…
99
0.563
0.664
-5.044
0.154
0.335
0.0849
166.928
178147
0.688
A

3
5
2021-07-02--2021-07-09
Bad Habits
37,799,456
Ed Sheeran
83293380
6PQ88X9TkUIAUIZJHW2upE
['pop', 'uk pop']
2021-06-25
2021-07-23--2021-07-30\n2021-07-16--2021-07-23…
98
0.808
0.897

11

\

Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

-3.712
0.0348
0.0469
0.364
126.026
231041
0.591
B
4

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

\

5
1
2021-07-23--2021-07-30
INDUSTRY BABY (feat. Jack Harlow)
33,948,454
Lil Nas X
5473565
27NovPIUIRrOZoCHxABJwK
['lgbtq+ hip hop', 'pop rap']
2021-07-23
2021-07-23--2021-07-30
96
0.736
0.704
-7.409
0.0615
0.0203
0.0501
149.995
212000
0.894
D#/Eb
5

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability

1
18
2021-05-07--2021-05-14
MONTERO (Call Me By Your Name)
30,071,134
Lil Nas X
5473565
67BtfxlNbhBmCDR2L2l8qd
['lgbtq+ hip hop', 'pop rap']
2021-03-31
2021-07-23--2021-07-30\n2021-07-16--2021-07-23…
97
0.61

12

\

Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

0.508
-6.682
0.152
0.297
0.384
178.818
137876
0.758
G#/Ab
6

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

3
16
2021-05-14--2021-05-21
Kiss Me More (feat. SZA)
29,356,736
Doja Cat
8640063
748mdHapucXQri7IAO8yFK
['dance pop', 'pop']
2021-04-09
2021-07-23--2021-07-30\n2021-07-16--2021-07-23…
94
0.762
0.701
-3.541
0.0286
0.235
0.123
110.968
208867
0.742
G#/Ab
7

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity

\

2
10
2021-06-18--2021-06-25
Todo De Ti
26,951,613
Rauw Alejandro
6080597
4fSIb4hdOQ151TILNsSEaF
['puerto rican pop', 'trap latino']
2021-05-20
2021-07-23--2021-07-30\n2021-07-16--2021-07-23…
95

13

\

Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

0.78
0.718
-3.605
0.0506
0.31
0.0932
127.949
199604
0.342
D#/Eb
8

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

9
Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted

\

3
8
2021-06-18--2021-06-25
Yonaguni
25,030,128
Bad Bunny
36142273
2JPLbjOn0wPCngEot2STUS
['latin', 'reggaeton', 'trap latino']
2021-06-04
2021-07-23--2021-07-30\n2021-07-16--2021-07-23…
96
0.644
0.648
-4.601
0.118
0.276
0.135
179.951
206710
0.44
C#/Db

8
10
2021-07-02--2021-07-09
I WANNA BE YOUR SLAVE
24,551,591
Måneskin
3377762
4pt5fDVTg5GhEvEtlz9dKk
['indie rock italiano', 'italian pop']
2021-03-19
2021-07-23--2021-07-30\n2021-07-16--2021-07-23…

14

\

Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

95
0.75
0.608
-4.008
0.0387
0.00165
0.178
132.507
173347
0.958
C#/Db

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

…
…
…
…
…
…
…
…
…
…
…
…
…
…
…
…
…
…
…
…
…
…
…

1546
143
1
2019-12-27--2020-01-03
JACKBOYS
5,363,493
JACKBOYS
437907
62zKJrpbLxz6InR3tGyr7o
['rap', 'trap']
2019-12-27
2019-12-27--2020-01-03
56
0.413
0.13
-25.166
0.0336
0.9
0.111
123.342
46837
0.0676
C

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date

1547
156
1
2019-12-27--2020-01-03
Combatchy (feat. MC Rebecca)
5,149,797
Anitta, Lexa, Luísa Sonza
10741972
2bPtwnrpFNEe8N7Q85kLHw
['funk carioca', 'funk pop', 'pagode baiano', …
2019-11-20

15

\

\

Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

2019-12-27--2020-01-03
64
0.826
0.73
-3.032
0.0809
0.383
0.0197
150.134
157600
0.605
C#/Db

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

1548
178
1
2019-12-27--2020-01-03
Old Town Road
4,852,004
Lil Nas X
5488666
2YpeDb67231RjR0MgVLzsG
['lgbtq+ hip hop', 'pop rap']
2019-06-21
2019-12-27--2020-01-03
81
0.878
0.619
-5.56
0.102
0.0533
0.113
136.041
157067
0.639
F#/Gb

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre

1549
187
1
2019-12-27--2020-01-03
Let Me Know (I Wonder Why Freestyle)
4,701,532
Juice WRLD
19102888
3wwo0bJvDSorOpNfzEkfXx
['chicago rap', 'melodic rap']

16

\

\

Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID

2019-12-07
2019-12-27--2020-01-03
76
0.635
0.537
-7.895
0.0832
0.172
0.418
125.028
215381
0.383
G
1550
190
1
2019-12-27--2020-01-03
Ne reviens pas
4,676,857
Gradur, Heuss L'enfoiré
1390813
4TnFANpjVwVKWzkxNzIyFH
['francoton', 'french hip hop', 'pop urbaine',…
2019-11-29
2019-12-27--2020-01-03
62
0.932
0.778
-3.384
0.0638
0.212
0.168
124.996
188613
0.933
A#/Bb
1551
195
1
2019-12-27--2020-01-03
New Rules
4,630,675
Dua Lipa
27167675
2ekn2ttSfGqwhhate0LSR0

17

\

\

Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

['dance pop', 'pop', 'uk pop']
2017-06-02
2019-12-27--2020-01-03
79
0.762
0.7
-6.021
0.0694
0.00261
0.153
116.073
209320
0.608
A

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

1552
196
1
2019-12-27--2020-01-03
Cheirosa - Ao Vivo
4,623,030
Jorge & Mateus
15019109
2PWjKmjyTZeDpmOUa3a5da
['sertanejo', 'sertanejo universitario']
2019-10-11
2019-12-27--2020-01-03
66
0.528
0.87
-3.123
0.0851
0.24
0.333
152.37
181930
0.714
B

\

1553
197
1
2019-12-27--2020-01-03
Havana (feat. Young Thug)
4,620,876
Camila Cabello
22698747

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers

18

\

Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

1rfofaqEpACxVEHIZBJe6W
['dance pop', 'electropop', 'pop', 'post-teen …
2018-01-12
2019-12-27--2020-01-03
81
0.765
0.523
-4.333
0.03
0.184
0.132
104.988
217307
0.394
D

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

1554
198
1
2019-12-27--2020-01-03
Surtada - Remix Brega Funk
4,607,385
Dadá Boladão, Tati Zaqui, OIK
208630
5F8ffc8KWKNawllr5WsW0r
['brega funk', 'funk carioca']
2019-09-25
2019-12-27--2020-01-03
60
0.832
0.55
-7.026
0.0587
0.249
0.182
154.064
152784
0.881
F

Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist

1555
199
1
2019-12-27--2020-01-03
Lover (Remix) [feat. Shawn Mendes]
4,595,450
Taylor Swift

19

\

Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord

42227614
3i9UVldZOE0aD0JnyfAZZ0
['pop', 'post-teen pop']
2019-11-13
2019-12-27--2020-01-03
70
0.448
0.603
-7.176
0.064
0.433
0.0862
205.272
221307
0.422
G

[22 rows x 1556 columns]

6.3

Convert object columns with numbers to float64

[20]: # List of columns to convert
columns_to_convert = ['Artist Followers', 'Streams','Popularity',␣
↪'Danceability', 'Energy', 'Loudness',
'Speechiness', 'Acousticness', 'Liveness', 'Tempo',␣
↪'Duration (ms)', 'Valence']
df_1[columns_to_convert] = df_1[columns_to_convert].apply(pd.to_numeric,␣
↪errors='coerce')
[21]: df_1.dtypes
[21]: Index
Highest Charting Position
Number of Times Charted
Week of Highest Charting
Song Name
Streams
Artist
Artist Followers
Song ID
Genre
Release Date
Weeks Charted
Popularity
Danceability
Energy

int64
int64
int64
object
object
float64
object
float64
object
object
object
object
float64
float64
float64

20

Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
Chord
dtype: object

7

float64
float64
float64
float64
float64
float64
float64
object

Data Cleaning Continued: Prepare DataFrame for Modeling
and Training

[22]: df_1 = df_1.drop("Index", axis = 1)
[23]: df_1
[23]:
0
1
2
3
4
…
1551
1552
1553
1554
1555

Highest Charting Position
1
2
1
3
5
…
195
196
197
198
199

0
1
2
3
4
…
1551
1552
1553
1554
1555

Week of Highest Charting
2021-07-23--2021-07-30
2021-07-23--2021-07-30
2021-06-25--2021-07-02
2021-07-02--2021-07-09
2021-07-23--2021-07-30
…
2019-12-27--2020-01-03
2019-12-27--2020-01-03
2019-12-27--2020-01-03
2019-12-27--2020-01-03
2019-12-27--2020-01-03

0
1

Number of Times Charted
8
3
11
5
1
…
1
1
1
1
1

\

Song Name Streams
Beggin'
NaN
STAY (with Justin Bieber)
NaN
good 4 u
NaN
Bad Habits
NaN
INDUSTRY BABY (feat. Jack Harlow)
NaN
…
…
New Rules
NaN
Cheirosa - Ao Vivo
NaN
Havana (feat. Young Thug)
NaN
Surtada - Remix Brega Funk
NaN
NaN
Lover (Remix) [feat. Shawn Mendes]

Artist
Måneskin
The Kid LAROI

Artist Followers
3377762.0
2230022.0

21

\

Song ID
3Wrjm47oTz2sjIgck11l5e
5HCyWlXZPP0y6Gqq8TgA20

\

2
3
4
…
1551
1552
1553
1554
1555

Olivia Rodrigo
Ed Sheeran
Lil Nas X
…
Dua Lipa
Jorge & Mateus
Camila Cabello
Dadá Boladão, Tati Zaqui, OIK
Taylor Swift

0
1
2
3
4
…
1551
1552
1553
1554
1555

Genre Release Date …
['indie rock italiano', 'italian pop']
2017-12-08 …
['australian hip hop']
2021-07-09 …
['pop']
2021-05-21 …
['pop', 'uk pop']
2021-06-25 …
['lgbtq+ hip hop', 'pop rap']
2021-07-23 …
…
… …
['dance pop', 'pop', 'uk pop']
2017-06-02 …
['sertanejo', 'sertanejo universitario']
2019-10-11 …
['dance pop', 'electropop', 'pop', 'post-teen …
2018-01-12 …
['brega funk', 'funk carioca']
2019-09-25 …
['pop', 'post-teen pop']
2019-11-13 …

Danceability Energy Loudness
0
0.714
0.800
-4.808
1
0.591
0.764
-5.484
2
0.563
0.664
-5.044
3
0.808
0.897
-3.712
4
0.736
0.704
-7.409
…
…
…
…
1551
0.762
0.700
-6.021
1552
0.528
0.870
-3.123
1553
0.765
0.523
-4.333
1554
0.832
0.550
-7.026
1555
0.448
0.603
-7.176

0
1
2
3
4
…
1551
1552
1553
1554

Tempo
134.002
169.928
166.928
126.026
149.995
…
116.073
152.370
104.988
154.064

6266514.0
83293380.0
5473565.0
…
27167675.0
15019109.0
22698747.0
208630.0
42227614.0

4ZtFanR9U6ndgddUvNcjcG
6PQ88X9TkUIAUIZJHW2upE
27NovPIUIRrOZoCHxABJwK
…
2ekn2ttSfGqwhhate0LSR0
2PWjKmjyTZeDpmOUa3a5da
1rfofaqEpACxVEHIZBJe6W
5F8ffc8KWKNawllr5WsW0r
3i9UVldZOE0aD0JnyfAZZ0

Speechiness Acousticness
0.0504
0.12700
0.0483
0.03830
0.1540
0.33500
0.0348
0.04690
0.0615
0.02030
…
…
…
0.0694
0.00261
0.0851
0.24000
0.0300
0.18400
0.0587
0.24900
0.0640
0.43300

Duration (ms) Valence
211560.0
0.589
141806.0
0.478
178147.0
0.688
231041.0
0.591
212000.0
0.894
…
…
…
209320.0
0.608
181930.0
0.714
217307.0
0.394
152784.0
0.881

Chord
B
C#/Db
A
B
D#/Eb
A
B
D
F

22

Liveness
0.3590
0.1030
0.0849
0.3640
0.0501
0.1530
0.3330
0.1320
0.1820
0.0862

\

\

1555

205.272

221307.0

0.422

G

[1556 rows x 22 columns]
[24]: df_clean_2 = df_1.copy()

7.1

Identify Object Columns & Drop them

[25]: object_columns = df_clean_2.select_dtypes(include=['object']).columns
df_clean_2 = df_clean_2.drop(columns=object_columns)
[26]: df_clean_2.isnull().sum()
[26]: Highest Charting Position
Number of Times Charted
Streams
Artist Followers
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
dtype: int64

0
0
1556
11
11
11
11
11
11
11
11
11
11
11

[27]: df_clean_2.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1556 entries, 0 to 1555
Data columns (total 14 columns):
#
Column
Non-Null Count
--- ------------------0
Highest Charting Position 1556 non-null
1
Number of Times Charted
1556 non-null
2
Streams
0 non-null
3
Artist Followers
1545 non-null
4
Popularity
1545 non-null
5
Danceability
1545 non-null
6
Energy
1545 non-null
7
Loudness
1545 non-null
8
Speechiness
1545 non-null
9
Acousticness
1545 non-null
10 Liveness
1545 non-null
11 Tempo
1545 non-null
23

Dtype
----int64
int64
float64
float64
float64
float64
float64
float64
float64
float64
float64
float64

12 Duration (ms)
13 Valence
dtypes: float64(12), int64(2)
memory usage: 170.3 KB

7.2

1545 non-null
1545 non-null

float64
float64

Drop Streams Column (essentially empty)

[28]: df_clean_2.drop('Streams', axis = 1, inplace = True)
[29]: df_clean_2.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1556 entries, 0 to 1555
Data columns (total 13 columns):
#
Column
Non-Null Count
--- ------------------0
Highest Charting Position 1556 non-null
1
Number of Times Charted
1556 non-null
2
Artist Followers
1545 non-null
3
Popularity
1545 non-null
4
Danceability
1545 non-null
5
Energy
1545 non-null
6
Loudness
1545 non-null
7
Speechiness
1545 non-null
8
Acousticness
1545 non-null
9
Liveness
1545 non-null
10 Tempo
1545 non-null
11 Duration (ms)
1545 non-null
12 Valence
1545 non-null
dtypes: float64(11), int64(2)
memory usage: 158.2 KB

7.3

Dtype
----int64
int64
float64
float64
float64
float64
float64
float64
float64
float64
float64
float64
float64

Get means and replace null values with mean per column

[30]: df_clean_2.isna().sum()
[30]: Highest Charting Position
Number of Times Charted
Artist Followers
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)

0
0
11
11
11
11
11
11
11
11
11
11
24

Valence
dtype: int64

11

[31]: null_columns = df_clean_2.columns[df_clean_2.isnull().any()].tolist()
print("Columns with null values:")
null_columns
Columns with null values:
[31]: ['Artist Followers',
'Popularity',
'Danceability',
'Energy',
'Loudness',
'Speechiness',
'Acousticness',
'Liveness',
'Tempo',
'Duration (ms)',
'Valence']
[32]: for col in null_columns:
#Calculate the mean, exluding NaN values
mean= df_clean_2[col].mean(skipna=True)
#replace NaNs with the mean per column
df_clean_2[col] = df_clean_2[col].fillna(mean)
[33]: print("\nNull value count after replacement:")
print(df_clean_2.isnull().sum())
Null value count after replacement:
Highest Charting Position
0
Number of Times Charted
0
Artist Followers
0
Popularity
0
Danceability
0
Energy
0
Loudness
0
Speechiness
0
Acousticness
0
Liveness
0
Tempo
0
Duration (ms)
0
Valence
0
dtype: int64

25

[34]: df_clean_2.dtypes
[34]: Highest Charting Position
Number of Times Charted
Artist Followers
Popularity
Danceability
Energy
Loudness
Speechiness
Acousticness
Liveness
Tempo
Duration (ms)
Valence
dtype: object

7.4

int64
int64
float64
float64
float64
float64
float64
float64
float64
float64
float64
float64
float64

Drop columns that have no relation to target = “Popularity”

[35]: df_clean_2.drop('Highest Charting Position', axis = 1, inplace = True)
[36]: df_clean_2.drop('Number of Times Charted', axis = 1, inplace = True)
[37]: # df_clean_2.drop('Artist Followers', axis = 1, inplace = True)
[38]: df_scaling = df_clean_2.copy()
[39]: df_scaling.hist()
plt.tight_layout()
plt.show
[39]: <function matplotlib.pyplot.show(close=None, block=None)>

26

8

Data Scaling

8.1

Data Scaling (standard scaler)

8.1.1

Setup standard scaled training and testing data

[40]: df_3_std = df_scaling.copy()
[41]: x1 = df_3_std.drop(['Popularity'], axis=1)
y1 = df_3_std['Popularity']
X_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(x1, y1, test_size=0.
↪2)
[42]: scaler = StandardScaler()
X_train_std = scaler.fit_transform(X_train_1)
X_test_std = scaler.transform(X_test_1)
[43]: print("Before scaling:")
print(X_train_1.describe())

27

print("\nAfter scaling:")
print(pd.DataFrame(X_train_std).describe())
Before scaling:
Artist Followers
count
1.244000e+03
mean
1.502319e+07
std
1.697594e+07
min
4.883000e+03
25%
2.010879e+06
50%
6.874642e+06
75%
2.384846e+07
max
8.333778e+07

count
mean
std
min
25%
50%
75%
max

Acousticness
1244.000000
0.246213
0.250102
0.000025
0.047725
0.157000
0.379000
0.994000

Danceability
1244.000000
0.688672
0.143047
0.184000
0.596750
0.702000
0.795250
0.980000

Liveness
1244.000000
0.180991
0.144075
0.019700
0.096300
0.125500
0.214250
0.962000

Energy
1244.000000
0.633649
0.161532
0.054000
0.529000
0.641500
0.753500
0.970000

Tempo
1244.000000
123.219617
29.634639
46.718000
97.989750
122.129000
144.188500
205.272000

Loudness
1244.000000
-6.377879
2.501783
-25.166000
-7.493000
-6.063500
-4.770750
1.509000

Duration (ms)
1244.000000
197943.723099
47771.864606
30133.000000
169117.500000
193764.000000
218766.000000
588139.000000

Speechiness
1244.000000
0.123342
0.109590
0.023200
0.045775
0.075450
0.165000
0.884000

\

Valence
1244.000000
0.515175
0.226094
0.032000
0.344000
0.514704
0.687250
0.977000

After scaling:
0
1
2
3
4
count 1.244000e+03 1.244000e+03 1.244000e+03 1.244000e+03 1.244000e+03
mean -2.855879e-18 -3.626967e-16 2.227586e-16 -8.924622e-17 -3.926834e-17
std
1.000402e+00 1.000402e+00 1.000402e+00 1.000402e+00 1.000402e+00
min
-8.850379e-01 -3.529423e+00 -3.589887e+00 -7.512912e+00 -9.141580e-01
25%
-7.668234e-01 -6.428565e-01 -6.481114e-01 -4.459096e-01 -7.080796e-01
50%
-4.801989e-01 9.320933e-02 4.862487e-02 1.257126e-01 -4.371881e-01
75%
5.200783e-01 7.453532e-01 7.422646e-01 6.426518e-01 3.802789e-01
max
4.025820e+00 2.037402e+00 2.083095e+00 3.153771e+00 6.943750e+00
5
6
7
8
9
count 1.244000e+03 1.244000e+03 1.244000e+03 1.244000e+03 1.244000e+03
mean -2.427497e-17 6.568522e-17 -1.485057e-16 -3.427055e-17 3.212864e-17
std
1.000402e+00 1.000402e+00 1.000402e+00 1.000402e+00 1.000402e+00
min
-9.847428e-01 -1.119948e+00 -2.582531e+00 -3.514165e+00 -2.137915e+00
25%
-7.939460e-01 -5.880646e-01 -8.517065e-01 -6.036569e-01 -7.574029e-01
50%
-3.568487e-01 -3.853103e-01 -3.681689e-02 -8.752859e-02 -2.086376e-03
75%
5.311457e-01 2.309379e-01 7.078647e-01 4.360443e-01 7.613821e-01
max
2.991130e+00 5.423046e+00 2.769913e+00 8.171174e+00 2.043445e+00
[44]: print("Mean:", X_train_std.mean(axis=0))
print("Std:", X_train_std.std(axis=0))

28

\

Mean: [-2.85587916e-18 -3.62696654e-16 2.22758575e-16 -8.92462238e-17
-3.92683385e-17 -2.42749729e-17 6.56852207e-17 -1.48505716e-16
-3.42705500e-17 3.21286406e-17]
Std: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]

8.2

Data Scaling Continued (min-max scaler)

[45]: df_3_mm = df_scaling.copy()
[46]: x2 = df_3_mm.drop(['Popularity'], axis=1)
y2 = df_3_mm['Popularity']
X_train_2, X_test_2, y_train_2, y_test_2 = train_test_split(x2, y2, test_size=0.
↪2)
8.2.1

Setup mm scaled training and testing data

[47]: scaler = MinMaxScaler()
X_train_mm = scaler.fit_transform(X_train_2)
X_test_mm = scaler.transform(X_test_2)
[48]: print("Before scaling:")
print(X_train_2.describe())
print("\nAfter scaling:")
print(pd.DataFrame(X_train_mm).describe())
Before scaling:
Artist Followers
count
1.244000e+03
mean
1.500581e+07
std
1.683367e+07
min
4.883000e+03
25%
2.203386e+06
50%
7.383484e+06
75%
2.384846e+07
max
8.333778e+07

count
mean
std
min
25%
50%
75%
max

Acousticness
1244.000000
0.245874
0.247645
0.000038
0.047350
0.163000
0.371250
0.994000

Danceability
1244.000000
0.689197
0.142003
0.150000
0.600000
0.702000
0.794000
0.980000

Liveness
1244.000000
0.183616
0.147420
0.027300
0.097100
0.125000
0.215250
0.962000

Energy
1244.000000
0.632876
0.161036
0.103000
0.529000
0.640000
0.749000
0.966000

Tempo
1244.000000
123.432479
29.643415
46.718000
98.020500
122.811023
143.909500
205.272000

29

Loudness
1244.000000
-6.327491
2.458651
-22.507000
-7.455000
-6.002500
-4.779500
1.509000

Duration (ms)
1244.000000
197386.659299
44764.724834
30133.000000
169354.750000
194333.000000
220000.250000
484147.000000

Speechiness
1244.000000
0.124355
0.111424
0.023200
0.045400
0.077150
0.164250
0.884000

Valence
1244.000000
0.509094
0.226093
0.032000
0.336750
0.509000
0.682000
0.979000

\

After scaling:
count
mean
std
min
25%
50%
75%
max

0
1244.000000
0.180012
0.202005
0.000000
0.026382
0.088544
0.286124
1.000000

1
1244.000000
0.649635
0.171088
0.000000
0.542169
0.665060
0.775904
1.000000

2
1244.000000
0.613993
0.186600
0.000000
0.493627
0.622248
0.748552
1.000000

3
1244.000000
0.673697
0.102376
0.000000
0.626749
0.687229
0.738154
1.000000

4
1244.000000
0.117513
0.129442
0.000000
0.025790
0.062674
0.163859
1.000000

count
mean
std
min
25%
50%
75%
max

5
1244.000000
0.247329
0.249149
0.000000
0.047599
0.163952
0.373467
1.000000

6
1244.000000
0.167237
0.157719
0.000000
0.074676
0.104526
0.201081
1.000000

7
1244.000000
0.483838
0.186961
0.000000
0.323565
0.479919
0.612987
1.000000

8
1244.000000
0.368389
0.098598
0.000000
0.306646
0.361663
0.418197
1.000000

9
1244.000000
0.503796
0.238747
0.000000
0.321806
0.503696
0.686378
1.000000

\

[49]: print("Mean:", X_train_mm.mean(axis=0))
print("Std:", X_train_mm.std(axis=0))
Mean: [0.18001206 0.64963484 0.61399324 0.67369708 0.11751319 0.24732926
0.16723656 0.48383818 0.36838877 0.50379557]
Std: [0.20192392 0.17101913 0.18652536 0.10233438 0.12939005 0.24904917
0.15765541 0.18688584 0.09855804 0.23865076]

9

Model Selection and Training

9.1

Models: STD Scaler

9.1.1

Linear Regression std scaler

[50]: lr_model = LinearRegression()
lr_model.fit(X_train_std, y_train_1)
y_pred_lr = lr_model.predict(X_test_std)
print('Linear Regression:')
print(f"RMSE: {np.sqrt(mean_squared_error(y_test_1,y_pred_lr)) :.2f}%")
print(f"R2 Score: {r2_score(y_test_1,y_pred_lr):.2f}")
Linear Regression:
RMSE: 15.16%
R2 Score: 0.04
Cross Validation Score for Linear Regression

30

[51]: lr_model = LinearRegression()
cv_scores = cross_val_score(lr_model, X_train_1, y_train_1, cv=5,␣
↪scoring='neg_mean_squared_error')
rmse = np.sqrt(-cv_scores.mean())
print(f"Cross-validated RMSE: {rmse:.2f}")
Cross-validated RMSE: 15.63
9.1.2

Decision Tree Model std scaler

[ ]: dt_model = DecisionTreeRegressor()Certainly! I'll rewrite the analysis from␣
↪your perspective, addressing an audience who will be reading your project.␣
↪Here's how you might present your work:
### Introduction
Welcome to my project on Music Popularity Prediction. In this analysis, I've␣
↪developed a predictive model to forecast song popularity on Spotify's Top␣
↪200 Weekly (Global) charts for 2020 & 2021. This project aims to provide␣
↪insights into the factors that contribute to a song's success on these␣
↪charts.
### Project Overview
My goal was to create a supervised regression model that could predict a song's␣
↪popularity score based on various features. I've used a dataset provided by␣
↪DDC Data Science, which includes information about songs, their audio␣
↪features, artist popularity, and other relevant characteristics.
### Methodology
1. **Data Preparation**: I began by importing and cleaning the dataset. I used␣
↪Python libraries such as pandas, numpy, and scikit-learn for data␣
↪manipulation and analysis.
2. **Feature Engineering**: I selected and prepared the following features:
- Audio Features: Loudness, Energy, Danceability, Valence, Tempo
- Artist Popularity: Number of artist followers
- Song Characteristics: Duration
- Genre: Binary features for major genres
- Release Timing: Days since release
- Feature Interactions: Audio features × Artist popularity
- Cultural and Temporal Factors: Year (2020 vs 2021)
3. **Model Selection**: I experimented with several regression models:
- Linear Regression
- Decision Tree Regressor

31

- Random Forest Regressor
- XGBoost Regressor
4. **Model Evaluation**: I used cross-validation to assess model performance,␣
↪focusing on Mean Absolute Error (MAE), Root Mean Squared Error (RMSE), and␣
↪R-squared (R²) as evaluation metrics.
### Results
After training and evaluating the models, I found that [insert your findings␣
↪here, e.g., "the Random Forest Regressor performed best with an R² score of␣
↪X.XX and an RMSE of Y.YY"].
### Key Insights
1. **Feature Importance**: The most important features in predicting song␣
↪popularity were [list the top 3-5 features based on your analysis].
2. **Model Interpretation**: I observed that [describe any interesting patterns␣
↪or correlations you found, e.g., "songs with higher energy and danceability␣
↪tend to have higher popularity scores"].
3. **Performance Comparison**: [Compare the performance of different models, e.
↪g., "The Random Forest model outperformed the Linear Regression model by X%␣
↪in terms of R²"].
### Limitations and Future Work
While this project provides valuable insights into song popularity, there are␣
↪some limitations to consider:
1. The dataset is limited to 2020 & 2021, which may not capture long-term␣
↪trends.
2. Some potentially important factors like lyrics content or music video views␣
↪are not included in the dataset.
3. The model's performance could be improved by incorporating more advanced␣
↪feature engineering techniques or exploring other machine learning␣
↪algorithms.
### Conclusion
This project demonstrates the potential of machine learning in predicting song␣
↪popularity on Spotify's Top 200 Weekly charts. The insights gained from this␣
↪analysis could be valuable for music industry professionals, artists, and␣
↪streaming platforms looking to understand and potentially influence song␣
↪popularity.

32

By understanding which factors contribute most to a song's success,␣
↪stakeholders can make more informed decisions about song production,␣
↪marketing strategies, and playlist curation. Future work could involve␣
↪expanding the dataset, incorporating additional features, and exploring more␣
↪advanced machine learning techniques to further improve prediction accuracy.
dt_model.fit(X_train_std, y_train_1)
y_pred_dt = dt_model.predict(X_test_std)
print("\nDecision Tree:")
print(f"RMSE: {np.sqrt(mean_squared_error(y_test_1, y_pred_dt)) :.2f}%")
print(f"R2 Score: {r2_score(y_test_1, y_pred_dt):.2f}")
Decision Tree:
RMSE: 14.17%
R2 Score: 0.16
Cross Validation Score for Decision Tree
[53]: dt_model = DecisionTreeRegressor()
cv_scores = cross_val_score(dt_model, X_train_std, y_train_1, cv=5,␣
↪scoring='neg_mean_squared_error')
rmse = np.sqrt(-cv_scores.mean())
print(f"Cross-validated RMSE: {rmse:.2f}")
Cross-validated RMSE: 14.57
Feature Importance for Decision Tree
[54]: dt_model.fit(X_train_std, y_train_1)
feature_importances = dt_model.feature_importances_
feature_names = X_train_1.columns
feature_importance_df = pd.DataFrame({'feature': feature_names, 'importance':␣
↪feature_importances})
feature_importance_df = feature_importance_df.sort_values('importance',␣
↪ascending=False)
print(feature_importance_df)
0
1
7
4
6
3
9
5
8

feature
Artist Followers
Danceability
Tempo
Speechiness
Liveness
Loudness
Valence
Acousticness
Duration (ms)

importance
0.600323
0.055325
0.051575
0.049274
0.045333
0.044734
0.044718
0.042127
0.035648
33

2

Energy

9.1.3

0.030943

Random Forest Model std scaler

[55]: rf_model = RandomForestRegressor(n_estimators=100)
rf_model.fit(X_train_std, y_train_1)
y_pred_rf = rf_model.predict(X_test_std)
print("\nRandom Forest:")
print(f"RMSE: {np.sqrt(mean_squared_error(y_test_1, y_pred_rf)) :.2f}%")
print(f"R2 Score: {r2_score(y_test_1, y_pred_rf):.2f}")
Random Forest:
RMSE: 10.07%
R2 Score: 0.58
Cross Validation Score for Random Forest
[56]: rf_model = RandomForestRegressor(n_estimators=100)
cv_scores = cross_val_score(rf_model, X_train_1, y_train_1, cv=5,␣
↪scoring='neg_mean_squared_error')
rmse = np.sqrt(-cv_scores.mean())
print(f"Cross-validated RMSE: {rmse:.2f}")
Cross-validated RMSE: 10.88
Feature Importance for Random Forest
[57]: rf_model.fit(X_train_std, y_train_1)
feature_importances = rf_model.feature_importances_
feature_names = X_train_1.columns
feature_importance_df = pd.DataFrame({'feature': feature_names, 'importance':␣
↪feature_importances})
feature_importance_df = feature_importance_df.sort_values('importance',␣
↪ascending=False)
print(feature_importance_df)
0
1
3
4
9
6
5
2
7
8

feature
Artist Followers
Danceability
Loudness
Speechiness
Valence
Liveness
Acousticness
Energy
Tempo
Duration (ms)

importance
0.586970
0.056786
0.055212
0.050095
0.048851
0.047240
0.040879
0.039756
0.038204
0.036006

34

9.1.4

XGBoost Model std scaler

[58]: xgb_model = xgb.XGBRegressor(n_estimators=100)
xgb_model.fit(X_train_std, y_train_1)
y_pred_xgb = xgb_model.predict(X_test_std)
print("\nXGBoost:")
print(f"RMSE: {np.sqrt(mean_squared_error(y_test_1, y_pred_xgb)) :.2f}%")
print(f"R2 Score: {r2_score(y_test_1, y_pred_xgb):.2f}")
XGBoost:
RMSE: 10.32%
R2 Score: 0.55
Cross Validation Score for XGBoost
[59]: xgb_model = RandomForestRegressor(n_estimators=100)
cv_scores = cross_val_score(rf_model, X_train_std, y_train_1, cv=5,␣
↪scoring='neg_mean_squared_error')
rmse = np.sqrt(-cv_scores.mean())
print(f"Cross-validated RMSE: {rmse:.2f}")
Cross-validated RMSE: 10.91
Feature Importance for XGBoost
[60]: xgb_model.fit(X_train_std, y_train_1)
feature_importances = xgb_model.feature_importances_
feature_importance_df = pd.DataFrame({'feature': feature_names, 'importance':␣
↪feature_importances})
feature_importance_df = feature_importance_df.sort_values('importance',␣
↪ascending=False)
print(feature_importance_df)
0
3
1
9
4
6
2
7
5
8

feature
Artist Followers
Loudness
Danceability
Valence
Speechiness
Liveness
Energy
Tempo
Acousticness
Duration (ms)

importance
0.580929
0.055263
0.053465
0.052384
0.051421
0.047823
0.042646
0.041453
0.038274
0.036341

35

9.1.5

STD Model Comparison Table

[61]: results = {
'Model': ['Linear Regression', 'Decision Tree', 'Random Forest', 'XGBoost'],
'RMSE': [np.sqrt(mean_squared_error(y_test_1, y_pred_lr)),
np.sqrt(mean_squared_error(y_test_1, y_pred_dt)),
np.sqrt(mean_squared_error(y_test_1, y_pred_rf)),
np.sqrt(mean_squared_error(y_test_1, y_pred_xgb))],
'R2 Score': [r2_score(y_test_1, y_pred_lr),
r2_score(y_test_1, y_pred_dt),
r2_score(y_test_1, y_pred_rf),
r2_score(y_test_1, y_pred_xgb)]
}
results_df = pd.DataFrame(results)
print(results_df)
0
1
2
3

Model
Linear Regression
Decision Tree
Random Forest
XGBoost

RMSE
15.158785
14.167396
10.066779
10.315816

R2 Score
0.036740
0.158615
0.575189
0.553911

9.2

Models: MM Scaler

9.2.1

Linear Regression mm scaler

[62]: lr_model = LinearRegression()
lr_model.fit(X_train_mm, y_train_2)
y_pred_lr = lr_model.predict(X_test_mm)
print('Linear Regression:')
y_pred_lr = lr_model.predict(X_test_std)
print('Linear Regression:')
print(f"RMSE: {np.sqrt(mean_squared_error(y_test_1,y_pred_lr)) :.2f}%")
print(f"R2 Score: {r2_score(y_test_1,y_pred_lr):.2f}")
print(f"RMSE: {np.sqrt(mean_squared_error(y_test_2,y_pred_lr)) :.2f}%")
print(f"R2 Score: {r2_score(y_test_2,y_pred_lr):.2f}")
Linear Regression:
Linear Regression:
RMSE: 38.03%
R2 Score: -5.06
RMSE: 39.44%
R2 Score: -4.90
Cross Validation Score for Linear Regression mm
[63]: lr_model = LinearRegression()
cv_scores = cross_val_score(lr_model, X_train_mm, y_train_2, cv=5,␣
↪scoring='neg_mean_squared_error')
36

rmse = np.sqrt(-cv_scores.mean())
print(f"Cross-validated RMSE: {rmse:.2f}")
Cross-validated RMSE: 15.41
9.2.2

Decision Tree mm scaler

[64]: dt_model = DecisionTreeRegressor()
dt_model.fit(X_train_mm, y_train_2)
y_pred_dt = dt_model.predict(X_test_mm)
print("\nDecision Tree:")
print(f"RMSE: {np.sqrt(mean_squared_error(y_test_2, y_pred_dt)) :.2f}%")
print(f"R2 Score: {r2_score(y_test_2, y_pred_dt):.2f}")
Decision Tree:
RMSE: 14.84%
R2 Score: 0.16
Cross Validation Score for Decision Tree mm
[65]: cv_scores = cross_val_score(dt_model, X_train_mm, y_train_2, cv=5,␣
↪scoring='neg_mean_squared_error')
rmse = np.sqrt(-cv_scores.mean())
print(f"Cross-validated RMSE: {rmse:.2f}")
Cross-validated RMSE: 14.39
Feature Importance for Decision Tree mm
[66]: dt_model.fit(X_train_mm, y_train_2)
feature_importances = dt_model.feature_importances_
feature_names = X_train_2.columns
feature_importance_df = pd.DataFrame({'feature': feature_names, 'importance':␣
↪feature_importances})
feature_importance_df = feature_importance_df.sort_values('importance',␣
↪ascending=False)
print(feature_importance_df)
0
4
2
3
7
6
5
8

feature
Artist Followers
Speechiness
Energy
Loudness
Tempo
Liveness
Acousticness
Duration (ms)

importance
0.614245
0.071105
0.051089
0.047083
0.043985
0.042395
0.039479
0.033401

37

9
1

Valence
Danceability

0.032421
0.024799

9.2.3

Random Forest mm scaler

[67]: rf_model = RandomForestRegressor(n_estimators=100)
rf_model.fit(X_train_mm, y_train_2)
y_pred_rf = rf_model.predict(X_test_mm)
print("\nRandom Forest:")
print(f"RMSE: {np.sqrt(mean_squared_error(y_test_2, y_pred_rf)) :.2f}%")
print(f"R2 Score: {r2_score(y_test_2, y_pred_rf):.2f}")
Random Forest:
RMSE: 10.86%
R2 Score: 0.55
Cross Validation Score Random Forest mm
[68]: rf_model = RandomForestRegressor(n_estimators=100)
cv_scores = cross_val_score(rf_model, X_train_2, y_train_2, cv=5,␣
↪scoring='neg_mean_squared_error')
rmse = np.sqrt(-cv_scores.mean())
print(f"Cross-validated RMSE: {rmse:.2f}")
Cross-validated RMSE: 10.71
Feature Importance for Random Forest mm
[69]: rf_model.fit(X_train_mm, y_train_2)
feature_importances = rf_model.feature_importances_
feature_names = X_train_2.columns
feature_importance_df = pd.DataFrame({'feature': feature_names, 'importance':␣
↪feature_importances})
feature_importance_df = feature_importance_df.sort_values('importance',␣
↪ascending=False)
print(feature_importance_df)
0
3
4
6
1
2
8
5
9
7

feature
Artist Followers
Loudness
Speechiness
Liveness
Danceability
Energy
Duration (ms)
Acousticness
Valence
Tempo

importance
0.581954
0.069626
0.053389
0.050916
0.043224
0.043053
0.040544
0.039911
0.039841
0.037542
38

9.2.4

XGBoost mm scaler

[70]: xgb_model = xgb.XGBRegressor(n_estimators=100)
xgb_model.fit(X_train_mm, y_train_2)
y_pred_xgb = xgb_model.predict(X_test_mm)
print("\nXGBoost:")
print(f"RMSE: {np.sqrt(mean_squared_error(y_test_2, y_pred_xgb)) :.2f}%")
print(f"R2 Score: {r2_score(y_test_2, y_pred_xgb):.2f}")
XGBoost:
RMSE: 11.99%
R2 Score: 0.45
Cross Validation Score for XGBoost mm
[71]: xgb_model = xgb.XGBRegressor(n_estimators=100)
cv_scores = cross_val_score(rf_model, X_train_2, y_train_2, cv=5,␣
↪scoring='neg_mean_squared_error')
rmse = np.sqrt(-cv_scores.mean())
print(f"Cross-validated RMSE: {rmse:.2f}")
Cross-validated RMSE: 10.69
Feature Importance for XGBoost mm
[72]: xgb_model.fit(X_train_mm, y_train_2)
feature_importances = xgb_model.feature_importances_
feature_names = X_train_2.columns
feature_importance_df = pd.DataFrame({'feature': feature_names, 'importance':␣
↪feature_importances})
feature_importance_df = feature_importance_df.sort_values('importance',␣
↪ascending=False)
print(feature_importance_df)
0
5
4
8
3
9
2
6
1
7

feature
Artist Followers
Acousticness
Speechiness
Duration (ms)
Loudness
Valence
Energy
Liveness
Danceability
Tempo

importance
0.401930
0.087532
0.078639
0.069953
0.069588
0.068392
0.066063
0.054426
0.053320
0.050158

39

9.2.5

MM Model Comparison Table

[73]: results = {
'Model': ['Linear Regression', 'Decision Tree', 'Random Forest', 'XGBoost'],
'RMSE': [np.sqrt(mean_squared_error(y_test_2, y_pred_lr)),
np.sqrt(mean_squared_error(y_test_2, y_pred_dt)),
np.sqrt(mean_squared_error(y_test_2, y_pred_rf)),
np.sqrt(mean_squared_error(y_test_2, y_pred_xgb))],
'R2 Score': [r2_score(y_test_2, y_pred_lr),
r2_score(y_test_2, y_pred_dt),
r2_score(y_test_2, y_pred_rf),
r2_score(y_test_2, y_pred_xgb)]
}
results_df = pd.DataFrame(results)
print(results_df)
0
1
2
3

Model
Linear Regression
Decision Tree
Random Forest
XGBoost

9.3

RMSE R2 Score
39.437529 -4.898392
14.839850 0.164833
10.855057 0.553133
11.988273 0.454961

Model Plotting STD Scaler

[74]: plt.figure(figsize=(15, 10))
plt.subplot(2, 2, 1)
plt.scatter(y_test_1, y_pred_lr)
plt.plot([y_test_1.min(), y_test_1.max()], [y_test_1.min(), y_test_1.max()],␣
↪'r--', lw=2)
plt.xlabel('Actual Popularity')
plt.ylabel('Predicted Popularity')
plt.title('Linear Regression')
plt.subplot(2, 2, 2)
plt.scatter(y_test_1, y_pred_dt)
plt.plot([y_test_1.min(), y_test_1.max()], [y_test_1.min(), y_test_1.max()],␣
↪'r--', lw=2)
plt.xlabel('Actual Popularity')
plt.ylabel('Predicted Popularity')
plt.title('Decision Tree')
plt.subplot(2, 2, 3)
plt.scatter(y_test_1, y_pred_rf)
plt.plot([y_test_1.min(), y_test_1.max()], [y_test_1.min(), y_test_1.max()],␣
↪'r--', lw=2)
plt.xlabel('Actual Popularity')
40

plt.ylabel('Predicted Popularity')
plt.title('Random Forest')
plt.subplot(2, 2, 4)
plt.scatter(y_test_1, y_pred_xgb)
plt.plot([y_test_1.min(), y_test_1.max()], [y_test_1.min(), y_test_1.max()],␣
↪'r--', lw=2)
plt.xlabel('Actual Popularity')
plt.ylabel('Predicted Popularity')
plt.title('XGBoost')
plt.tight_layout()
plt.suptitle('Model Performance - Standard Scaling')
plt.show()

9.4

Model Plotting MinMax Scaler

[75]: plt.figure(figsize=(15, 10))
plt.subplot(2, 2, 1)
plt.scatter(y_test_2, y_pred_lr)
plt.plot([y_test_2.min(), y_test_2.max()], [y_test_2.min(), y_test_2.max()],␣
↪'r--', lw=2)

41

plt.xlabel('Actual Popularity')
plt.ylabel('Predicted Popularity')
plt.title('Linear Regression')
plt.subplot(2, 2, 2)
plt.scatter(y_test_2, y_pred_dt)
plt.plot([y_test_2.min(), y_test_2.max()], [y_test_2.min(), y_test_2.max()],␣
↪'r--', lw=2)
plt.xlabel('Actual Popularity')
plt.ylabel('Predicted Popularity')
plt.title('Decision Tree')
plt.subplot(2, 2, 3)
plt.scatter(y_test_2, y_pred_rf)
plt.plot([y_test_2.min(), y_test_2.max()], [y_test_2.min(), y_test_2.max()],␣
↪'r--', lw=2)
plt.xlabel('Actual Popularity')
plt.ylabel('Predicted Popularity')
plt.title('Random Forest')
plt.subplot(2, 2, 4)
plt.scatter(y_test_2, y_pred_xgb)
plt.plot([y_test_2.min(), y_test_2.max()], [y_test_2.min(), y_test_2.max()],␣
↪'r--', lw=2)
plt.xlabel('Actual Popularity')
plt.ylabel('Predicted Popularity')
plt.title('XGBoost')
plt.tight_layout()
plt.suptitle('Model Performance - Min-Max Scaling')
plt.show()

42

9.5

Methodology

1. Data Preparation: I began by importing and cleaning the dataset. I used Python libraries
such as pandas, numpy, and scikit-learn for data manipulation and analysis.
2. Feature Engineering: I selected and prepared the following features:
• Audio Features: Loudness, Energy, Danceability, Valence, Tempo
• Artist Popularity: Number of artist followers
• Song Characteristics: Duration
• Genre: Binary features for major genres
• Release Timing: Days since release
• Feature Interactions: Audio features × Artist popularity
• Cultural and Temporal Factors: Year (2020 vs 2021)
3. Model Selection: I experimented with several regression models:
• Linear Regression
• Decision Tree Regressor
• Random Forest Regressor
• XGBoost Regressor
4. Model Evaluation: I used cross-validation to assess model performance using Root Mean
Squared Error (RMSE), and R-squared (R²) as evaluation metrics.

43

9.5.1

Key Insights

1. Feature Importance: The most important features in predicting song popularity were [list
the top 3-5 features based on your analysis].
2. Model Interpretation: I observed that [describe any interesting patterns or correlations
you found, e.g., “songs with higher energy and danceability tend to have higher popularity
scores”].
3. Performance Comparison: [Compare the performance of different models, e.g., “The Random Forest model outperformed the Linear Regression model by X% in terms of R²”].
9.5.2

Limitations and Future Work

While this project provides valuable insights into song popularity, there are some limitations to
consider:
1. The dataset is limited to 2020 & 2021, which may not capture long-term trends.
2. Some potentially important factors like lyrics content or music video views are not included
in the dataset.
3. The model’s performance could be improved by incorporating more advanced feature engineering techniques or exploring other machine learning algorithms.
9.5.3

Conclusion

This project demonstrates the potential of machine learning in predicting song popularity on Spotify’s Top 200 Weekly charts. The insights gained from this analysis could be valuable for music
industry professionals, artists, and streaming platforms looking to understand and potentially influence song popularity.
By understanding which factors contribute most to a song’s success, stakeholders can make more
informed decisions about song production, marketing strategies, and playlist curation. Future
work could involve expanding the dataset, incorporating additional features, and exploring more
advanced machine learning techniques to further improve prediction accuracy.

44

