# Timing and optimizing code

Q: Are computers so fast that optimizing code for speed no longer matters?
##  The Context
- It depends

- Often optimizing isn't important

- Computers are faster

- It still can matter

- Try to learn & use best-practices

## Video
[Modern Data Warehousing with BigQuery](https://www.youtube.com/watch?v=eOQ3YJKgvHE&t=300s)  - Watch from 5:00 to 7:20.  
### Take-aways
- You might care about speed when dealing with big data

- Some of the cutting edge problems to be solved _still_ have to do with optimization



**Considerations**

- Size of dataset

- How often a task needs to be done

- Time it takes to make process faster/time it takes to run it as is.

-  How much are you going to learn from the process of making your code faster?  

-  Is anybody else going to see your code?





## How to speed up your code?

Below are a few easy ways.

### 1. List Comprehensions vs For Loop
### 2. Numpy Arrays
### 3. Multiple Assignments
### 4. Use F Strings
### 5. Use Built-In Functions

Built-in functions such as `len()`, `abs()`, `min()`, and `max()` are written in C and are therefore very efficient.
### 6. Use Enumerate
There are many other ways to speed up your code, you just have to decide if it is needed for whatever application you are working on.
## Metric Prefixes & Scientific Notation
[Wikipedia Metric Prefixes & Symbols](https://en.wikipedia.org/wiki/Metric_prefix)
288.0 ms 10E-3 - decimal place goes over three  -> 0.288 s



3.59 Âµs  10E-6 - decimal place goes over six places -> 0.00000359 s
import numpy as np
r = 1_000_000
# For Loop

# %% will turn this into a cell magic

# It will work on multi-line code

%%timeit

squares = []



for n in range(r):

  squares.append(n**2)

# List Comprehension

# % indicates a magic command

# %timeit will apply to one line

result = %timeit -r3 -n10 -o squares = [n**2 for n in range(r)]

result

result.all_runs
%timeit squares = (np.arange(r))**2

%timeit squares = list((np.arange(r))**2)

%timeit?

%%timeit

a = 5

b = 10

c = 20

d = 25

%timeit a,b,c,d = 5,10,20,25
name = 'Dwight Schrute'

%timeit name + ' loves beets'

%timeit '%s loves beets' % name

%timeit  '{} loves beets'.format(name)

%timeit f'{name} loves beets'
our_list = [i**2 for i in range(5)]

our_list

# Without enumerate

# note using time only runs the script once

%%time

output = list(range(len(our_list)))

for i in range(len(our_list)):

  output[i] = (f'{i}^2 = {our_list[i]}')



print("\n".join(output))



%%time

for i, item in enumerate(our_list):

  print(f'{i}^2 = {item}')
%%time

print("\n".join( f'{i}^2 = {item}' for i, item in enumerate(our_list) ) )

